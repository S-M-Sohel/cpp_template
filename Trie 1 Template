{
"Trie data structure": {
  "prefix": "TRIE1",
  "body": [
    "class Node {",
    "public:",
    "    Node* links[26]; ",
    "    bool flag = false; ",
    "",
    "    Node() {",
    "        for (int i = 0; i < 26; i++) {",
    "            links[i] = nullptr;",
    "        }",
    "    }",
    "",
    "    bool containsKey(char c) {",
    "        return links[c - 'a'] != nullptr;",
    "    }",
    "",
    "    void put(char c, Node* node) {",
    "        links[c - 'a'] = node;",
    "    }",
    "",
    "    Node* get(char c) {",
    "        return links[c - 'a'];",
    "    }",
    "",
    "    void setEnd() {",
    "        flag = true;",
    "    }",
    "",
    "    bool isEnd() {",
    "        return flag;",
    "    }",
    "};",
    "",
    "class Trie {",
    "private:",
    "    Node* root;",
    "",
    "public:",
    "    Trie() {",
    "        root = new Node();",
    "    }",
    "",
    "    void insert(const string& word) {",
    "        Node* node = root;",
    "        for (char c : word) {",
    "            if (!node->containsKey(c)) {",
    "                node->put(c, new Node());",
    "            }",
    "            node = node->get(c);",
    "        }",
    "        node->setEnd();",
    "    }",
    "",
    "    bool search(const string& word) {",
    "        Node* node = root;",
    "        for (char c : word) {",
    "            if (!node->containsKey(c)) {",
    "                return false;",
    "            }",
    "            node = node->get(c);",
    "        }",
    "        return node->isEnd();",
    "    }",
    "",
    "    bool startsWith(const string& prefix) {",
    "        Node* node = root;",
    "        for (char c : prefix) {",
    "            if (!node->containsKey(c)) {",
    "                return false;",
    "            }",
    "            node = node->get(c);",
    "        }",
    "        return true;",
    "    }",
    "",
    "    Node* getRoot() {",
    "        return root;",
    "    }",
    "};",
    ""
  ],
  "description": "Trie data structure"
}
}
